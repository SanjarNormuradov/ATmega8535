;****** Include Files ******
.include "m8535def.inc"


;****** Initialize GPR ******
.def TEMPR1 = R16
.def DELAY_PARAM = R17
.def SAMPLE_TRIAL_MODE = R18
.def ONE_TWO_DIGIT_MODE = R19
.def TWO_DIGIT_MODE_SEQUENCE = R20
.def PREVIOUS_OUTPUT_DATA = R21
.def INPUT_DATA = R22
.def OUTPUT_DATA_TEMP = R23
.def OUTPUT_DATA = R24
.def INPUT_ROW = R25
.def DIAL_CONTROL = R26
.def REPETITION_CONTROL = R27
.def INPUT_DATA_OPTION = R28
.def BULLS_EYE_CNT = R29
.def UART_RECEIVE_DATA = R30
.def UART_ERROR_FLAGS = R31


;****** Initialize CONST ******
;*** PORT/PIN ***
.equ SOUNDER = PORTD5
.equ RED_LED = PORTC5
.equ GREEN_LED = PORTA7
.equ BUTTON_MODE = PIND2
.equ BUTTON_CLEAR = PIND3
.equ SEG_CLK = PORTC0
.equ SEG_DATA = PORTC1
.equ SEG_OUTPUT_MODE = (1<<SEG_CLK)|(1<<SEG_DATA)
;*** KEYBOARD ***
.equ KEY_IN_1 = PORTB4
.equ KEY_IN_2 = PORTB5
.equ KEY_IN_3 = PORTB6
.equ KEY_IN_4 = PORTB7
.equ KEY_OUTPUT_MODE = (1<<KEY_IN_1)|(1<<KEY_IN_2)|(1<<KEY_IN_3)|(1<<KEY_IN_4)
.equ ROWS4321_1110 = 0xE0
.equ ROWS4321_1101 = 0xD0
.equ ROWS4321_1011 = 0xB0
.equ ROWS4321_0111 = 0x70
.equ KEY_OUT_1 = PIND4
.equ KEY_OUT_2 = PIND6
.equ KEY_OUT_3 = PIND7
.equ KEY_OUTPUT_DEFAULT = (1<<KEY_OUT_1)|(1<<KEY_OUT_2)|(1<<KEY_OUT_3)
;*** External Interrupts ***
.equ EXT_INT0_ANY_ISC = (0<<ISC01)|(1<<ISC00)
.equ EXT_INT1_FALL_ISC = (1<<ISC11)|(0<<ISC10)
.equ EXT_INT0_EN = (1<<INT0)
.equ EXT_INT1_EN = (1<<INT1)
;*** Timer 1 Parameters ***
.equ TIM1_PSC_RESET = (1<<CS12)|(1<<CS11)|(1<<CS10)
.equ TIM1_PSC64 = (0<<CS12)|(1<<CS11)|(1<<CS10)
;.equ TIM1_MODE_RESET_A = (1<<WGM11)|(1<<WGM10)
;.equ TIM1_MODE_RESET_B = (1<<WGM13)|(1<<WGM12)
.equ TIM1_FAST_PWM_OCR1A_A = (1<<WGM11)|(1<<WGM10)
.equ TIM1_FAST_PWM_OCR1A_B = (1<<WGM13)|(1<<WGM12)
;.equ TIM1_COM_RESET_A = (1<<COM1A1)|(1<<COM1A0)
.equ TIM1_FAST_PWM_TOGGLE_OC1A = (0<<COM1A1)|(1<<COM1A0)
;*** Timer 0 Parameters ***
.equ TIM0_PSC_RESET = (1<<CS02)|(1<<CS01)|(1<<CS00)
.equ TIM0_PSC256 = (1<<CS12)|(0<<CS11)|(0<<CS10)
;.equ TIM0_MODE_RESET = (1<<WGM01)|(1<<WGM00)
.equ TIM0_NORMAL_MODE = (0<<WGM01)|(0<<WGM00)
;.equ TIM0_COM_RESET = (1<<COM01)|(1<<COM00)
.equ TIM0_COM_DISCONNECT = (0<<COM01)|(0<<COM00)
.equ TIM0_INT_OVF_EN = (1<<TOIE0)
;*** Delay Parameters ***
.equ MAX_CNT = 255
.equ DELAY_mSEC = 20
;*** 7-Segment Indicator ***
.equ DIGIT_NONE = 0b11111111
.equ DIGIT_0 = 0b11000000
.equ DIGIT_1 = 0b11111001
.equ DIGIT_2 = 0b10100100
.equ DIGIT_3 = 0b10110000
.equ DIGIT_4 = 0b10011001
.equ DIGIT_5 = 0b10010010
.equ DIGIT_6 = 0b10000010
.equ DIGIT_7 = 0b11111000
.equ DIGIT_8 = 0b10000000
.equ DIGIT_9 = 0b10010000
.equ DIGIT_ASTERISK = 0b10001000
.equ DIGIT_HASHTAG = 0b10001001
;.equ CHAR_R = 0b10001000
;.equ CHAR_e = 0b10000100
;.equ CHAR_a = 0b10100000
;.equ CHAR_d = 0b10100001
;.equ CHAR_y = 0b10010001
;.equ CHAR_Qmark = 0b10101100
.equ CHAR_S = 0b10010010
.equ CHAR_U = 0b11000001
.equ CHAR_C = 0b11000110
.equ CHAR_Ec = 0b10000110
.equ CHAR_F = 0b10001110
.equ CHAR_Ac = 0b10001000
.equ CHAR_L = 0b11000111
;*** USART ***
.equ UART_BAUD_4800 = 12
.equ UART_ASYNC_MODE = (1<<URSEL)|(0<<UMSEL)
.equ UART_NO_PARITY = (1<<URSEL)|(0<<UPM1)|(0<<UPM0)
.equ UART_1_STOP = (1<<URSEL)|(0<<USBS)
.equ UART_UCSRC_8_DATA = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0)
.equ UART_UCSRB_8_DATA =(0<<UCSZ2)
.equ UART_RX_EN = (1<<RXEN)
.equ UART_TX_EN = (1<<TXEN)
.equ ASCII_E = 0x45
.equ ASCII_r = 0x72
.equ ASCII_o = 0x6F
.equ ASCII_S = 0x53
.equ ASCII_U = 0x55
.equ ASCII_C = 0x43
.equ ASCII_F = 0x46
.equ ASCII_A = 0x41
.equ ASCII_I = 0x49
.equ ASCII_L = 0x4C
.equ ASCII_ExMark = 0x21
.equ ASCII_SMILE = 0x29
.equ ASCII_DISAPP = 0x28
.equ ASCII_CR = 0xD
;*** Musical Notes ***
;** 1st Octava **
.equ C4 = 0x1E;	(CLK=1MHz)/64 = 2*(C4=30) * 262 Hz
.equ C4D4 = 0x1C;	(CLK=1MHz)/64 = 2*(C4D4=28) * 277 Hz
.equ D4 = 0x1B;	(CLK=1MHz)/64 = 2*(D4=27) * 294 Hz
.equ D4E4 = 0x19;	(CLK=1MHz)/64 = 2*(D4E4=25) * 311 Hz
.equ E4 = 0x18;	(CLK=1MHz)/64 = 2*(E4=24) * 330 Hz
.equ F4 = 0x16;	(CLK=1MHz)/64 = 2*(F4=22) * 349 Hz
.equ F4G4 = 0x15;	(CLK=1MHz)/64 = 2*(F4G4=21) * 370 Hz
.equ G4 = 0x14;	(CLK=1MHz)/64 = 2*(G4=20) * 392 Hz
.equ G4A4 = 0x13;	(CLK=1MHz)/64 = 2*(G4A4=19) * 415 Hz
.equ A4 = 0x12;	(CLK=1MHz)/64 = 2*(A4=18) * 440 Hz
.equ A4B4 = 0x11;	(CLK=1MHz)/64 = 2*(A4B4=17) * 466 Hz
.equ B4 = 0x10;	(CLK=1MHz)/64 = 2*(B4=16) * 494 Hz
;** 2nd Octava **
.equ C5 = 0x0F;	(CLK=1MHz)/64 = 2*(C5=15) * 523 Hz
.equ C5D5 = 0x0E;	(CLK=1MHz)/64 = 2*(C5D5=14) * 554 Hz
.equ D5 = 0x0D;	(CLK=1MHz)/64 = 2*(B4=13) * 587 Hz


;****** Interrup Vector ******
.org 0x0
	RJMP RESET
	RJMP EXT_INT0
	RJMP EXT_INT1
	RETI;	RJMP TIM2_COMP
	RETI;	RJMP TIM2_OVF
	RETI;	RJMP TIM1_CAPT
	RETI;	RJMP TIM1_COMPA
	RETI;	RJMP TIM1_COMPB
	RETI;	RJMP TIM1_OVF
	RJMP TIM0_OVF
	RETI;	RJMP SPI_STC
	RETI;	RJMP USART_RXC
	RETI;	RJMP USART_DRE
	RETI;	RJMP USART_TXC
	RETI;	RJMP ADC_COMP
	RETI;	RJMP EE_READY
	RETI;	RJMP ANA_COMP
	RETI;	RJMP TWI
	RETI;	RJMP INT2
	RETI;	RJMP TIM0_COMP
	RETI;	RJMP SPM_RDY

.org 0x15
	RESET:
		;	Initialize Stack
		LDI TEMPR1, LOW(RAMEND)
		OUT SPL, TEMPR1
		LDI TEMPR1, HIGH(RAMEND)
		OUT SPH, TEMPR1

		;	Initialize PORTD5(OC1A Pin) As Output For Sounder
		SBI DDRD, SOUNDER
		;	Initialize PORTB2 As Output For Green LED
		SBI DDRA, GREEN_LED
		SBI PORTA, GREEN_LED
		;	Initialize PORTC5 As Output For Red LED
		SBI DDRC, RED_LED
		SBI PORTC, RED_LED
		;	Initialize PORTB4:7 As Outputs For Keyboard
		IN TEMPR1, DDRB
		SBR TEMPR1, KEY_OUTPUT_MODE
		OUT DDRB, TEMPR1
		;	Start Sending 1 To Keyboard Rows From 1st Row
		LDI INPUT_ROW, 0x1
		LDI DIAL_CONTROL, KEY_OUTPUT_DEFAULT
		MOV REPETITION_CONTROL, DIAL_CONTROL
		;	Initialize PORTC1:0 As DATA:CLK Outputs For 7-Segment Indicators
		IN TEMPR1, DDRC
		SBR TEMPR1, SEG_OUTPUT_MODE
		OUT DDRC, TEMPR1
		;	Turn Off All 7-segment Indicators
		RCALL SEGMENTS_SLEEP_MODE

		;*** Timer 0 Settings ***
		IN TEMPR1, TCCR0
		;	Initially Clock Source Is Reset To None, 
		;	Timer0 Turned Off, Power Saved
		;	Enable Normal Mode
;		CBR TEMPR1, TIM0_MODE_RESET
		SBR TEMPR1, TIM0_NORMAL_MODE
		;	Disconnect OC0 For Normal Port Operation
;		CBR TEMPR1, TIM0_COM_RESET
		SBR TEMPR1, TIM0_COM_DISCONNECT
		OUT TCCR0, TEMPR1
		;	Enable Overflow Interrupt
		IN TEMPR1, TIMSK
		SBR TEMPR1, TIM0_INT_OVF_EN
		OUT TIMSK, TEMPR1

		;*** Timer 1 Settings ***
		;	If Clock Source Is Selected, Timer1 Turned On
		;	Select Clock Source With Prescaler 64
;		IN TEMPR1, TCCR1B
;		CBR TEMPR1, TIM1_PSC_RESET
;		SBR TEMPR1, TIM1_PSC64
;		OUT TCCR1B, TEMPR1
		;	Enable Fast PWM OCR1A Mode
		IN TEMPR1, TCCR1B
;		CBR TEMPR1, TIM1_MODE_RESET_B
		SBR TEMPR1, TIM1_FAST_PWM_OCR1A_B
		OUT TCCR1B, TEMPR1
		IN TEMPR1, TCCR1A
;		CBR TEMPR1, TIM1_MODE_RESET_A
		SBR TEMPR1, TIM1_FAST_PWM_OCR1A_A
		;	Select Fast PWM Mode, Toggle OC1A Pin On Compare Match
;		CBR TEMPR1, TIM1_COM_RESET_A
		SBR TEMPR1, TIM1_FAST_PWM_TOGGLE_OC1A
		OUT TCCR1A, TEMPR1

		;*** UART Settings ***
		;	Set BAUD Rate(4800)
		LDI TEMPR1, UART_BAUD_4800
		OUT UBRRL, TEMPR1
		;	Set Frame Format: 
		IN TEMPR1, UBRRH
		IN TEMPR1, UCSRC
		IN DELAY_PARAM, UCSRB
		;	8 Data Bits
		SBR TEMPR1, UART_UCSRC_8_DATA
		SBR DELAY_PARAM, UART_UCSRB_8_DATA
		;	1 Stop Bit
		SBR TEMPR1, UART_1_STOP
		;	No Parity Bit
		SBR TEMPR1, UART_NO_PARITY
		;	Asynchronous Mode
		SBR TEMPR1, UART_ASYNC_MODE
		OUT UCSRC, TEMPR1
		OUT UCSRB, DELAY_PARAM
		;	Enable Receive Operation
		IN TEMPR1, UCSRB
		SBR TEMPR1, UART_RX_EN
		OUT UCSRB, TEMPR1
		;	Enable Transmit Operation
		IN TEMPR1, UCSRB
		SBR TEMPR1, UART_TX_EN
		OUT UCSRB, TEMPR1

		;*** External Interrupt 0 Settings ***
		;	Select Any Logical Change As Interrupt Sense Control 
		LDI TEMPR1, EXT_INT0_ANY_ISC
		OUT MCUCR, TEMPR1
		;	Enable External Interrupt 0 Request
		LDI TEMPR1,	EXT_INT0_EN
		OUT GICR, TEMPR1

		;*** External Interrupt 1 Settings ***
		;	Select Falling Edge As Interrupt Sense Control
		IN TEMPR1, MCUCR 
		SBR TEMPR1, EXT_INT1_FALL_ISC
		OUT MCUCR, TEMPR1
		;	Enable External Interrupt 1 Request
		IN TEMPR1, GICR
		SBR TEMPR1,	EXT_INT1_EN
		OUT GICR, TEMPR1

		;	Display "Ready?" In 7-segment Indicators
;		RCALL READY_TEXT

		;	Enable Global Interrupt
		SEI



;****** Main Program ******
	LOOP:
		CPI SAMPLE_TRIAL_MODE, 1
		BREQ TRIAL_MODE
		;	Show User All Options
		SAMPLE_MODE:
			RCALL ONE_DIGIT_MODE
			INPUT_NUMBER_SAMPLE_LOOP:
;				CLR DELAY_PARAM
;				LDI TEMPR1, 2
				TWO_DIGIT_MODE_INPUT_NUMBER_SAMPLE_LOOP:
					CPI SAMPLE_TRIAL_MODE, 1
					BREQ LOOP
					;	Receive Number From Keyboard
;					RCALL RECEIVE_DATA_FROM_KEYBOARD

					;	Receive Number Via UART
					RCALL RECEIVE_DATA_VIA_UART
					CPI SAMPLE_TRIAL_MODE, 1
					BREQ LOOP
;					CPI ONE_TWO_DIGIT_MODE, 0
;					BREQ PLAY_CORRESPONDING_OPTION
					;	If DIGIT_HASHTAG Pressed, 
					;	Two_digit Mode Activated/Reset
					;	Restart Receiving Input Number
;					CPI OUTPUT_DATA_TEMP, 14
;					BREQ INPUT_NUMBER_SAMPLE_LOOP
					;	Two-digit Mode Activated,
					;	Max Input Number Resolution, 12
					;	First Digit 1, Load 10 Instead
;					SBRC TEMPR1, 1
;					LDI OUTPUT_DATA_TEMP, 10
					;	Sum Input Number Digits, i.e. 11 = 10 + 1
;					ADD DELAY_PARAM, OUTPUT_DATA_TEMP
;					DEC TEMPR1
;					BRNE TWO_DIGIT_MODE_INPUT_NUMBER_SAMPLE_LOOP
				;	Display Corresponding Option
				PLAY_CORRESPONDING_OPTION:
					RCALL PLAY_CORRESPONDING_SOUND
				RJMP INPUT_NUMBER_SAMPLE_LOOP
		
		;	Relinquish Control To User
		TRIAL_MODE:
			RCALL ONE_DIGIT_MODE
			;	Start Counting User Trials
			LDI UART_ERROR_FLAGS, 12
			;	Initially INPUT_DATA_OPTION = 0
			;	Increment It Every Time PLAY_RANDOM_SOUND Called
			;	To Generate Random Sequence
			INC INPUT_DATA_OPTION
			INPUT_NUMBER_TRIAL_LOOP:
				DEC UART_ERROR_FLAGS
				BREQ TRIAL_MODE
				;	Display Random Option
				RCALL PLAY_RANDOM_SOUND
				;	Receive Number Via UART
				RCALL RECEIVE_DATA_VIA_UART
;				CLR DELAY_PARAM
;				LDI TEMPR1, 2
				TWO_DIGIT_MODE_INPUT_NUMBER_TRIAL_LOOP:
					CPI SAMPLE_TRIAL_MODE, 0
					BREQ LOOP
;					SBRC ONE_TWO_DIGIT_MODE, 0
;					LDI OUTPUT_DATA, DIGIT_HASHTAG
;					SBRS ONE_TWO_DIGIT_MODE, 0
;					LDI OUTPUT_DATA, DIGIT_0
;					RCALL DIGIT_SERIAL_TRANSFER
;					;	Receive Number From Keyboard
;					RCALL RECEIVE_DATA_FROM_KEYBOARD
					CPI SAMPLE_TRIAL_MODE, 0
					BREQ LOOP
;					;	If DIGIT_ASTERISK/DIGIT_HASHTAG Pressed, 
;					;	One-digit/Two-digit Mode Activated/Reset,
;					;	Restart Receiving Input Number
;					CPI OUTPUT_DATA_TEMP, 13
;					BREQ TWO_DIGIT_MODE_INPUT_NUMBER_TRIAL_LOOP
;					CPI OUTPUT_DATA_TEMP, 14
;					BREQ TWO_DIGIT_MODE_INPUT_NUMBER_TRIAL_LOOP
;					CPI ONE_TWO_DIGIT_MODE, 0
;					BREQ PROCESS_INPUT_DATA
;					SBRC TEMPR1, 1
;					LDI OUTPUT_DATA_TEMP, 10
;					ADD DELAY_PARAM, OUTPUT_DATA_TEMP
;					DEC TEMPR1
;					BRNE TWO_DIGIT_MODE_INPUT_NUMBER_TRIAL_LOOP
;				;	Process Received Data
				PROCESS_INPUT_DATA:
;					SBRS ONE_TWO_DIGIT_MODE, 0
					MOV DELAY_PARAM, OUTPUT_DATA_TEMP
					CP DELAY_PARAM, INPUT_DATA_OPTION
	 				BREQ TRIAL_SUCCESS
					TRIAL_FAILURE:
						RCALL FAILURE
						RJMP TRIAL_MODE_END
					TRIAL_SUCCESS:
						RCALL SUCCESS
						RJMP TRIAL_MODE_END		
			TRIAL_MODE_END:
				RCALL DISPLAY_BULLS_EYE
				;	If 5 Added To INPUT_DATA_OPTION 
				;	In Every PLAY_RANDOM_SOUND Call
				;	Sequence Of 12 Random Number(1-12) Generated
				;	Without Number Repetition
				LDI TEMPR1, 5
				ADD INPUT_DATA_OPTION, TEMPR1
				MOV TEMPR1, INPUT_DATA_OPTION
				SUBI INPUT_DATA_OPTION, 12
				BRCS INPUT_DATA_OPTION_LESS_EQUAL_TWELVE
				CPI INPUT_DATA_OPTION, 0
				BRNE TRIAL_MODE_FINAL_END
				INPUT_DATA_OPTION_LESS_EQUAL_TWELVE:
					MOV INPUT_DATA_OPTION, TEMPR1
				TRIAL_MODE_FINAL_END:
					RJMP INPUT_NUMBER_TRIAL_LOOP


;****** SubPrograms ******

	;*** 20ms Delay to Exclude Contact Noise ***
	NOISE_DELAY:
		LDI DELAY_PARAM, DELAY_mSEC
		CLR TEMPR1
		NOISE_DELAY_BEGIN:
			CPI TEMPR1, MAX_CNT
			INC TEMPR1
			BRNE NOISE_DELAY_BEGIN
			DEC DELAY_PARAM
			BRNE NOISE_DELAY_BEGIN		
		RET;	SubProgram Return

	;*** Delay ***
	DELAY:
		;	Select Clock Source For Timer0 To Start Counting
		IN TEMPR1, TCCR0
		SBR TEMPR1, TIM0_PSC256
		OUT TCCR0, TEMPR1
		MOV TEMPR1, DELAY_PARAM
		ONE_SEC_DELAY_LOOP:
			CPI TEMPR1, 0
			BRNE ONE_SEC_DELAY_LOOP
		;	Reset Clock Source To None, Timer0 Turned Of
		IN TEMPR1, TCCR0
		CBR TEMPR1, TIM0_PSC_RESET
		OUT TCCR0, TEMPR1	
		RET;	SubProgram Return

	;*** Turn Off All 7-Segment Indicators ***
	SEGMENTS_SLEEP_MODE:
		PUSH TEMPR1
		SBI PORTC, SEG_DATA
		LDI TEMPR1, 0x20
		SLEEP_MODE_BEGIN:
			SBI PORTC, SEG_CLK
			CBI PORTC, SEG_CLK
			DEC TEMPR1
			BRNE SLEEP_MODE_BEGIN
		POP TEMPR1
		RET;	SubProgram Return

	;*** One-Digit Mode in Segments ***
	ONE_DIGIT_MODE:
		;	Store Data Of DELAY_PARAM In Stack
		;	In Main Loop, Sample Mode Option, 
		;	DELAY_PARAM Sums Input Data, TEMPR1 Counts Digits Sequence 
		;	If DIGIT_ASTERISK Mistakenly Pressed
		;	Data In DELAY_PARAM/TEMPR1 Will Be Lost In DIGIT_SERIAL_TRANSFER
		PUSH TEMPR1
		PUSH DELAY_PARAM 	

		LDI ONE_TWO_DIGIT_MODE, 0
		LDI OUTPUT_DATA, DIGIT_0
		RCALL DIGIT_SERIAL_TRANSFER
		;	Load Data Of DELAY_PARAM From Stack
		POP DELAY_PARAM
		POP TEMPR1
		RET;	SubProgram Return

	;*** Two-Digit Mode in Segments ***
	TWO_DIGIT_MODE:
		;	Store Data Of DELAY_PARAM In Stack
		;	In Main Loop, Sample Mode Option, 
		;	DELAY_PARAM Sums Input Data, TEMPR1 Counts Digits Sequence 
		;	If DIGIT_ASTERISK Mistakenly Pressed
		;	Data In DELAY_PARAM/TEMPR1 Will Be Lost In DIGIT_SERIAL_TRANSFER
		PUSH TEMPR1
		PUSH DELAY_PARAM 

		LDI ONE_TWO_DIGIT_MODE, 1
		RCALL DIGIT_SERIAL_TRANSFER
		;	Load Data Of DELAY_PARAM From Stack
		POP DELAY_PARAM
		POP TEMPR1
		RET;	SubProgram Return

	;*** Set Input Data In Keyboard ***
	SET_INPUT_DATA:
		SET_INPUT_DATA_BEGIN:
			SBRC INPUT_ROW, 0
			RJMP ZEROin1
			SBRC INPUT_ROW, 1
			RJMP ZEROin2
			SBRC INPUT_ROW, 2
			RJMP ZEROin3
			SBRC INPUT_ROW, 3
			RJMP ZEROin4

			ZEROin1:
				LDI INPUT_DATA, ROWS4321_1110
				LDI INPUT_ROW, 0x2
				RJMP SET_INPUT_DATA_END
			ZEROin2:
				LDI INPUT_DATA, ROWS4321_1101
				LDI INPUT_ROW, 0x4
				RJMP SET_INPUT_DATA_END
			ZEROin3:
				LDI INPUT_DATA, ROWS4321_1011
				LDI INPUT_ROW, 0x8
				RJMP SET_INPUT_DATA_END
			ZEROin4:
				LDI INPUT_DATA, ROWS4321_0111
				LDI INPUT_ROW, 0x1
		SET_INPUT_DATA_END:
			RET;	SubProgram Return

	;*** Input Row Detection ***
	PRESSED_KEY:
		PRESSED_KEY_DETECTION_BEGIN:			
			SBRC INPUT_ROW, 0
			RJMP KEYS_SOS
			SBRC INPUT_ROW, 1
			RJMP KEYS_123
			SBRC INPUT_ROW, 2
			RJMP KEYS_456
			SBRC INPUT_ROW, 3
			RJMP KEYS_789
			;** 1st Row Keyboards **
			KEYS_123:
				SBRS OUTPUT_DATA, KEY_OUT_1
				RJMP KEY_1
				SBRS OUTPUT_DATA, KEY_OUT_2
				RJMP KEY_2
				SBRS OUTPUT_DATA, KEY_OUT_3
				RJMP KEY_3
			;** 2nd Row Keyboards **
			KEYS_456:
				SBRS OUTPUT_DATA, KEY_OUT_1
				RJMP KEY_4
				SBRS OUTPUT_DATA, KEY_OUT_2
				RJMP KEY_5
				SBRS OUTPUT_DATA, KEY_OUT_3
				RJMP KEY_6
			;** 3rd Row Keyboards **	
			KEYS_789:
				SBRS OUTPUT_DATA, KEY_OUT_1
				RJMP KEY_7
				SBRS OUTPUT_DATA, KEY_OUT_2
				RJMP KEY_8
				SBRS OUTPUT_DATA, KEY_OUT_3
				RJMP KEY_9
			;** 4st Row Keyboards **
			KEYS_SOS:
				SBRS OUTPUT_DATA, KEY_OUT_1
				RJMP KEY_ASTERISK
				SBRS OUTPUT_DATA, KEY_OUT_2
				RJMP KEY_0
				SBRS OUTPUT_DATA, KEY_OUT_3
				RJMP KEY_HASHTAG
				;** Send Number To Indicator **
				KEY_1:
					LDI OUTPUT_DATA, DIGIT_1
					LDI OUTPUT_DATA_TEMP, 1
					RJMP PRESSED_KEY_DETECTION_END
				KEY_2:
					LDI OUTPUT_DATA, DIGIT_2
					LDI OUTPUT_DATA_TEMP, 2	
					RJMP PRESSED_KEY_DETECTION_END
				KEY_3:
					LDI OUTPUT_DATA, DIGIT_3
					LDI OUTPUT_DATA_TEMP, 3
					RJMP PRESSED_KEY_DETECTION_END
				KEY_4:
					LDI OUTPUT_DATA, DIGIT_4
					LDI OUTPUT_DATA_TEMP, 4
					RJMP PRESSED_KEY_DETECTION_END
				KEY_5:
					LDI OUTPUT_DATA, DIGIT_5
					LDI OUTPUT_DATA_TEMP, 5
					RJMP PRESSED_KEY_DETECTION_END
				KEY_6:
					LDI OUTPUT_DATA, DIGIT_6
					LDI OUTPUT_DATA_TEMP, 6
					RJMP PRESSED_KEY_DETECTION_END
				KEY_7:
					LDI OUTPUT_DATA, DIGIT_7
					LDI OUTPUT_DATA_TEMP, 7
					RJMP PRESSED_KEY_DETECTION_END
				KEY_8:
					LDI OUTPUT_DATA, DIGIT_8
					LDI OUTPUT_DATA_TEMP, 8
					RJMP PRESSED_KEY_DETECTION_END
				KEY_9:
					LDI OUTPUT_DATA, DIGIT_9
					LDI OUTPUT_DATA_TEMP, 9
					RJMP PRESSED_KEY_DETECTION_END
				KEY_ASTERISK:
					LDI OUTPUT_DATA, DIGIT_ASTERISK
					LDI OUTPUT_DATA_TEMP, 13
					RET
				KEY_0:
					LDI OUTPUT_DATA, DIGIT_0
					LDI OUTPUT_DATA_TEMP, 0
					RJMP PRESSED_KEY_DETECTION_END
				KEY_HASHTAG:
					LDI OUTPUT_DATA, DIGIT_HASHTAG
					LDI OUTPUT_DATA_TEMP, 14
					RET
		PRESSED_KEY_DETECTION_END:
			SBRS SAMPLE_TRIAL_MODE, 0
			RCALL DIGIT_SERIAL_TRANSFER
			RET;	SubProgram Return

	;*** Serial Data Transfer, Digits ***
	DIGIT_SERIAL_TRANSFER:
		;	Store Data Of DELAY_PARAM In Stack
		PUSH TEMPR1
		PUSH DELAY_PARAM

		LDI TEMPR1, 0x08
		CPI ONE_TWO_DIGIT_MODE, 0
		BREQ ONE_DIGIT_SERIAL_TRANSFER
		TWO_DIGIT_SERIAL_TRANSFER:
			CPI OUTPUT_DATA, DIGIT_HASHTAG
			BREQ RESET_TWO_DIGIT_MODE
			CPI TWO_DIGIT_MODE_SEQUENCE, 1
			BREQ SECOND_DIGIT
			;	Send 1st Digit, Xx
			FIRST_DIGIT:
				;	Send 0 Before 1st Digit, 0X
				MOV PREVIOUS_OUTPUT_DATA, OUTPUT_DATA
				LDI OUTPUT_DATA, DIGIT_0
				;	Start Counting From 0
				CLR DELAY_PARAM
				RJMP ONE_DIGIT_SERIAL_TRANSFER
			;	Send 2nd Digit, xX 
			SECOND_DIGIT:
				MOV DELAY_PARAM, OUTPUT_DATA
				MOV OUTPUT_DATA, PREVIOUS_OUTPUT_DATA
				MOV PREVIOUS_OUTPUT_DATA, DELAY_PARAM
				;	Start Counting From 0
				CLR DELAY_PARAM
				RJMP ONE_DIGIT_SERIAL_TRANSFER
			;	Reset Two-digit Mode, 00	
			RESET_TWO_DIGIT_MODE:
				LDI OUTPUT_DATA, DIGIT_0
				LDI PREVIOUS_OUTPUT_DATA, DIGIT_0
				LDI TWO_DIGIT_MODE_SEQUENCE, 1
				CLR DELAY_PARAM
		;	Clear Indicators Before Sending Digits
		ONE_DIGIT_SERIAL_TRANSFER:
			RCALL SEGMENTS_SLEEP_MODE

		DIGIT_SERIAL_TRANSFER_BEGIN:
			LSL OUTPUT_DATA
			BRCS SEND_1
			SEND_0:
				CBI PORTC, SEG_DATA
				SBI PORTC, SEG_CLK
				CBI PORTC, SEG_CLK
				DEC TEMPR1
				BRNE DIGIT_SERIAL_TRANSFER_BEGIN
				RJMP DIGIT_SERIAL_TRANSFER_DOUBLE_CHECK
			SEND_1:
				SBI PORTC, SEG_DATA
				SBI PORTC, SEG_CLK
				CBI PORTC, SEG_CLK
				DEC TEMPR1
				BRNE DIGIT_SERIAL_TRANSFER_BEGIN

		DIGIT_SERIAL_TRANSFER_DOUBLE_CHECK:
			CPI ONE_TWO_DIGIT_MODE, 0
			;	Digit Was Sent In One-Digit Mode, Return Subprogram
			BREQ DIGIT_SERIAL_TRANSFER_END
			;	Two-Digit Mode
			CPI DELAY_PARAM, 0
			BREQ FIRST_SENT_SECOND_NEXT
			;	2nd Digit Was Sent,
			;	Start Next Transfer From 1st Digit, Return Subprogram
;			SBRC TWO_DIGIT_MODE_SEQUENCE, 0
;			CLR PREVIOUS_OUTPUT_DATA; NEEDS TO BE RETHOUGHT, NO EFFECT?
			EOR TWO_DIGIT_MODE_SEQUENCE, DELAY_PARAM
			RJMP DIGIT_SERIAL_TRANSFER_END
			;	DIGIT_0 Or 1st Digit From Previous Trasfer Was Sent,
			;	Send Next 1st Or 2nd Digit Respectively
			FIRST_SENT_SECOND_NEXT:
				MOV OUTPUT_DATA, PREVIOUS_OUTPUT_DATA
				INC DELAY_PARAM
				LDI TEMPR1, 0x08
				RJMP DIGIT_SERIAL_TRANSFER_BEGIN

			DIGIT_SERIAL_TRANSFER_END:
			;	Load Data Of DELAY_PARAM From Stack
			POP DELAY_PARAM
			POP TEMPR1
				RET;	SubProgram Return

	;*** Serial Data Transfer, Characters ***
	CHAR_SERIAL_TRANSFER:
		LDI TEMPR1, 0x8
		CHAR_SERIAL_TRANSFER_BEGIN:
			LSL OUTPUT_DATA
			BRCS SEND_1_CHAR
			SEND_0_CHAR:
				CBI PORTC, SEG_DATA
				SBI PORTC, SEG_CLK
				CBI PORTC, SEG_CLK
				DEC TEMPR1
				BRNE CHAR_SERIAL_TRANSFER_BEGIN
				RJMP CHAR_SERIAL_TRANSFER_END
			SEND_1_CHAR:
				SBI PORTC, SEG_DATA
				SBI PORTC, SEG_CLK
				CBI PORTC, SEG_CLK
				DEC TEMPR1
				BRNE CHAR_SERIAL_TRANSFER_BEGIN
		CHAR_SERIAL_TRANSFER_END:
			RET;	SubProgram Return			

	;*** Display "FAIL" Text In 7-segment Indicators ***
	FAIL_TEXT:
		LDI OUTPUT_DATA, CHAR_F
		RCALL CHAR_SERIAL_TRANSFER
		LDI OUTPUT_DATA, CHAR_Ac
		RCALL CHAR_SERIAL_TRANSFER
		LDI OUTPUT_DATA, DIGIT_1
		RCALL CHAR_SERIAL_TRANSFER
		LDI OUTPUT_DATA, CHAR_L
		RCALL CHAR_SERIAL_TRANSFER
		RET;	SubProgram Return

	;*** Display Running "SUCCESS" Text In 7-segment Indicators ***
	SUCCESS_TEXT:
		;	Store Data Of DELAY_PARAM In Stack
		PUSH REPETITION_CONTROL

		LDI OUTPUT_DATA, CHAR_S
		RCALL CHAR_SERIAL_TRANSFER
		RCALL DELAY
		LDI OUTPUT_DATA, CHAR_U
		RCALL CHAR_SERIAL_TRANSFER
		RCALL DELAY
		LDI OUTPUT_DATA, CHAR_C
		RCALL CHAR_SERIAL_TRANSFER
		RCALL DELAY
		LDI OUTPUT_DATA, CHAR_C
		RCALL CHAR_SERIAL_TRANSFER
		RCALL DELAY
		LDI OUTPUT_DATA, CHAR_Ec
		RCALL CHAR_SERIAL_TRANSFER
		RCALL DELAY
		LDI OUTPUT_DATA, CHAR_S
		RCALL CHAR_SERIAL_TRANSFER
		RCALL DELAY
		LDI OUTPUT_DATA, CHAR_S
		RCALL CHAR_SERIAL_TRANSFER
		RCALL DELAY
		
		LDI REPETITION_CONTROL, 4
		LDI DELAY_PARAM, 2
		EMPTY_LINE_LOOP:
			LDI OUTPUT_DATA, DIGIT_NONE
			RCALL CHAR_SERIAL_TRANSFER
			RCALL DELAY
			DEC REPETITION_CONTROL
			BRNE EMPTY_LINE_LOOP
		;	Load Data Of DELAY_PARAM From Stack
		POP REPETITION_CONTROL
		RET;	SubProgram Return

	;*** User Trial Was Unsuccessful ***
	FAILURE:
		;	Store Data Of UART_ERROR_FLAGS In Stack
		PUSH UART_ERROR_FLAGS
;		PUSH REPETITON_CONTROL
		LDI DELAY_PARAM, 10
		LDI REPETITION_CONTROL, 3
		FAIL_TEXT_LOOP:
			CBI PORTC, RED_LED
			IN TEMPR1, TCCR1B
			SBR TEMPR1, TIM1_PSC64
			OUT TCCR1B, TEMPR1
			RCALL ERROR_BEEP

			;	"FAIL(((" UART Transmit
			LDI UART_ERROR_FLAGS, ASCII_F
			RCALL UART_TRANSMIT_CHAR
			LDI UART_ERROR_FLAGS, ASCII_A
			RCALL UART_TRANSMIT_CHAR
			LDI UART_ERROR_FLAGS, ASCII_I
			RCALL UART_TRANSMIT_CHAR
			LDI UART_ERROR_FLAGS, ASCII_L
			RCALL UART_TRANSMIT_CHAR
			LDI UART_ERROR_FLAGS, ASCII_DISAPP
			RCALL UART_TRANSMIT_CHAR
			RCALL UART_TRANSMIT_CHAR
			RCALL UART_TRANSMIT_CHAR
			LDI UART_ERROR_FLAGS, ASCII_CR
			RCALL UART_TRANSMIT_CHAR

			RCALL FAIL_TEXT
			IN TEMPR1, TCCR1B
			CBR TEMPR1, TIM1_PSC_RESET
			OUT TCCR1B, TEMPR1
			RCALL DELAY
			SBI PORTC, RED_LED
			RCALL SEGMENTS_SLEEP_MODE
			LDI DELAY_PARAM, 2
			RCALL DELAY
			LDI DELAY_PARAM, 10
			DEC REPETITION_CONTROL
			BRNE FAIL_TEXT_LOOP
		LDI UART_ERROR_FLAGS, ASCII_CR
		RCALL UART_TRANSMIT_CHAR
		;	Load Data Of UART_ERROR_FLAGS From Stack
;		POP REPETITON_CONTROL
		POP UART_ERROR_FLAGS
		RET;	SubProgram Return

	;*** User Trial Was Successful ***
	SUCCESS:
		;	Store Data Of UART_ERROR_FLAGS In Stack
		PUSH UART_ERROR_FLAGS
;		PUSH REPETITON_CONTROL

		INC BULLS_EYE_CNT
		RCALL SEGMENTS_SLEEP_MODE
		LDI DELAY_PARAM, 5
		LDI REPETITION_CONTROL, 3
		SUCCESS_LOOP:
			;	Turn On Green LED
			CBI PORTA, GREEN_LED
			IN TEMPR1, TCCR1B
			SBR TEMPR1, TIM1_PSC64
			OUT TCCR1B, TEMPR1
			RCALL SUCCESS_BEEP

			;	"SUCCESS!!))" UART Transmit
			LDI UART_ERROR_FLAGS, ASCII_S
			RCALL UART_TRANSMIT_CHAR
			LDI UART_ERROR_FLAGS, ASCII_U
			RCALL UART_TRANSMIT_CHAR
			LDI UART_ERROR_FLAGS, ASCII_C
			RCALL UART_TRANSMIT_CHAR
			RCALL UART_TRANSMIT_CHAR
			LDI UART_ERROR_FLAGS, ASCII_E
			RCALL UART_TRANSMIT_CHAR
			LDI UART_ERROR_FLAGS, ASCII_S
			RCALL UART_TRANSMIT_CHAR
			RCALL UART_TRANSMIT_CHAR
			LDI UART_ERROR_FLAGS, ASCII_ExMark
			RCALL UART_TRANSMIT_CHAR
			RCALL UART_TRANSMIT_CHAR
			LDI UART_ERROR_FLAGS, ASCII_SMILE
			RCALL UART_TRANSMIT_CHAR
			RCALL UART_TRANSMIT_CHAR
			LDI UART_ERROR_FLAGS, ASCII_CR
			RCALL UART_TRANSMIT_CHAR

			;	Turn Off Green LED
			SBI PORTA, GREEN_LED
			RCALL SUCCESS_TEXT
			;	Turn On Green LED
			CBI PORTA, GREEN_LED
			IN TEMPR1, TCCR1B
			CBR TEMPR1, TIM1_PSC_RESET
			OUT TCCR1B, TEMPR1
			RCALL DELAY
			;	Turn Off Green LED
			SBI PORTA, GREEN_LED
			LDI DELAY_PARAM, 5
			DEC REPETITION_CONTROL
			BRNE SUCCESS_LOOP
		LDI UART_ERROR_FLAGS, ASCII_CR
		RCALL UART_TRANSMIT_CHAR
		;	Load Data Of UART_ERROR_FLAGS From Stack
;		POP REPETITON_CONTROL
		POP UART_ERROR_FLAGS
		RET;	SubProgram Return
	
	;*** Display Bull's Eye Quantity in User Trial ***
	DISPLAY_BULLS_EYE:
		DISPLAY_BULLS_EYE_BEGIN:
			;	Store Data Of DELAY_PARAM In Stack
;			PUSH DELAY_PARAM

			RCALL SEGMENTS_SLEEP_MODE
			;	Convert Binary To Decimal
			MOV DELAY_PARAM, BULLS_EYE_CNT
			SUBI BULLS_EYE_CNT, 10
			BRCS FIRST_DIGIT_NONE
			FIRST_DIGIT_ONE:
				LDI OUTPUT_DATA, DIGIT_1
				RCALL CHAR_SERIAL_TRANSFER
				RJMP FIRST_DIGIT_ONE_SECOND_X
			FIRST_DIGIT_NONE:
				MOV BULLS_EYE_CNT, DELAY_PARAM
				CPI BULLS_EYE_CNT, 9
				BREQ BULLS_EYE_CNT_NINE
				CPI BULLS_EYE_CNT, 8
				BREQ BULLS_EYE_CNT_EIGHT
				CPI BULLS_EYE_CNT, 7
				BREQ BULLS_EYE_CNT_SEVEN
				CPI BULLS_EYE_CNT, 6
				BREQ BULLS_EYE_CNT_SIX
				CPI BULLS_EYE_CNT, 5
				BREQ BULLS_EYE_CNT_FIVE
				CPI BULLS_EYE_CNT, 4
				BREQ BULLS_EYE_CNT_FOUR
				CPI BULLS_EYE_CNT, 3
				BREQ BULLS_EYE_CNT_THREE
				FIRST_DIGIT_ONE_SECOND_X:
					CPI BULLS_EYE_CNT, 2
					BREQ BULLS_EYE_CNT_TWO
					CPI BULLS_EYE_CNT, 1
					BREQ BULLS_EYE_CNT_ONE
					CPI BULLS_EYE_CNT, 0
					BREQ BULLS_EYE_CNT_ZERO
				BULLS_EYE_CNT_ZERO:
					LDI OUTPUT_DATA, DIGIT_0
					RJMP DISPLAY_BULLS_EYE_END
				BULLS_EYE_CNT_ONE:
					LDI OUTPUT_DATA, DIGIT_1
					RJMP DISPLAY_BULLS_EYE_END
				BULLS_EYE_CNT_TWO:
					LDI OUTPUT_DATA, DIGIT_2
					RJMP DISPLAY_BULLS_EYE_END
				BULLS_EYE_CNT_THREE:
					LDI OUTPUT_DATA, DIGIT_3
					RJMP DISPLAY_BULLS_EYE_END
				BULLS_EYE_CNT_FOUR:
					LDI OUTPUT_DATA, DIGIT_4
					RJMP DISPLAY_BULLS_EYE_END
				BULLS_EYE_CNT_FIVE:
					LDI OUTPUT_DATA, DIGIT_5
					RJMP DISPLAY_BULLS_EYE_END
				BULLS_EYE_CNT_SIX:
					LDI OUTPUT_DATA, DIGIT_6
					RJMP DISPLAY_BULLS_EYE_END
				BULLS_EYE_CNT_SEVEN:
					LDI OUTPUT_DATA, DIGIT_7
					RJMP DISPLAY_BULLS_EYE_END
				BULLS_EYE_CNT_EIGHT:
					LDI OUTPUT_DATA, DIGIT_8
					RJMP DISPLAY_BULLS_EYE_END
				BULLS_EYE_CNT_NINE:
					LDI OUTPUT_DATA, DIGIT_9
					RJMP DISPLAY_BULLS_EYE_END
		DISPLAY_BULLS_EYE_END:
			RCALL CHAR_SERIAL_TRANSFER
			;	Load Data Of DELAY_PARAM From Stack
;			POP DELAY_PARAM
			RET;	SubProgram Return	

;	;*** Display Running "Ready?" Text In 7-segment Indicators ***
;	READY_TEXT:
;		LDI OUTPUT_DATA, CHAR_R
;		RCALL CHAR_SERIAL_TRANSFER
;		LDI OUTPUT_DATA, CHAR_e
;		RCALL CHAR_SERIAL_TRANSFER
;		LDI OUTPUT_DATA, CHAR_a
;		RCALL CHAR_SERIAL_TRANSFER
;		LDI OUTPUT_DATA, CHAR_d
;		RCALL CHAR_SERIAL_TRANSFER
;		LDI OUTPUT_DATA, CHAR_y
;		RCALL CHAR_SERIAL_TRANSFER
;		LDI OUTPUT_DATA, CHAR_Qmark
;		RCALL CHAR_SERIAL_TRANSFER
;		RET;	SubProgram Return

	;*** Receive Input Number From Keyboard ***
	RECEIVE_DATA_FROM_KEYBOARD:
		NO_OR_LONG_PRESSED_KEY:
			RCALL SET_INPUT_DATA
			LONG_PRESSED_KEY:
				MOV REPETITION_CONTROL, DIAL_CONTROL
				MOV OUTPUT_DATA, OUTPUT_DATA_TEMP
				OUT PORTB, INPUT_DATA
				LDI DIAL_CONTROL, KEY_OUTPUT_DEFAULT
				IN OUTPUT_DATA_TEMP, PIND
				AND DIAL_CONTROL, OUTPUT_DATA_TEMP
				CPI DIAL_CONTROL, KEY_OUTPUT_DEFAULT
				BRNE LONG_PRESSED_KEY
				CP	DIAL_CONTROL, REPETITION_CONTROL
				BREQ NO_OR_LONG_PRESSED_KEY			
			RCALL PRESSED_KEY
			CPI OUTPUT_DATA, DIGIT_ASTERISK
			BREQ ONE_DIGIT_MODE_ACTIVATE
			CPI OUTPUT_DATA, DIGIT_HASHTAG
			BREQ TWO_DIGIT_MODE_ACTIVATE
			RJMP RECEIVE_DATA_FROM_KEYBOARD_END
			ONE_DIGIT_MODE_ACTIVATE:
				RCALL ONE_DIGIT_MODE
				RJMP RECEIVE_DATA_FROM_KEYBOARD_END
			TWO_DIGIT_MODE_ACTIVATE:
				RCALL TWO_DIGIT_MODE
		RECEIVE_DATA_FROM_KEYBOARD_END:
			RET;	SubProgram Return

	;*** Receive Input Number Via UART ***
	RECEIVE_DATA_VIA_UART:
		;	Data Of UART_ERROR_FLAGS (Quantity Of User Trials)
		;	Stored In Stack
		PUSH UART_ERROR_FLAGS
		PUSH PREVIOUS_OUTPUT_DATA
		UART_RECEIVE:
			CLR PREVIOUS_OUTPUT_DATA
			RCALL UART_RECEIVE_CHAR
			;	0.Exclude Instanteneously Error Case
			CPI UART_RECEIVE_DATA, -1
			BREQ TRANSMIT_ERROR
			;	1.Carriage Return Check
			CPI UART_RECEIVE_DATA, 13
			BREQ UART_RECEIVE
			;	Digit Received, Convert ASCII To Decimal
			SUBI UART_RECEIVE_DATA, 48
			ADD PREVIOUS_OUTPUT_DATA, UART_RECEIVE_DATA
			;	2.Second Digit Check
			RCALL UART_RECEIVE_CHAR
			CPI UART_RECEIVE_DATA, 13
			BREQ UART_RECEIVE_END
			;	Compare Second Digit With 2, Max Resolution = 12
			SUBI UART_RECEIVE_DATA, 48
			;	Save Received Digit, Maybe Less Than 3 
			MOV UART_ERROR_FLAGS, UART_RECEIVE_DATA
			SUBI UART_RECEIVE_DATA, 3
			BRCS UART_RECEIVE_SECOND_DIGIT_LESS_THREE
			RJMP TRANSMIT_ERROR
			UART_RECEIVE_SECOND_DIGIT_LESS_THREE:
				;	Compare First Digit With 1, Max Resolution = 12
				CPI PREVIOUS_OUTPUT_DATA, 1
				BRNE TRANSMIT_ERROR
				LDI PREVIOUS_OUTPUT_DATA, 10
				ADD PREVIOUS_OUTPUT_DATA, UART_ERROR_FLAGS
				RJMP UART_RECEIVE_END
			;	Transmit Error Message To User, If
			;	1.Error Flags Detected While Receive Operation
			;	2.Input Number More Than Max Resolution = 12
			TRANSMIT_ERROR:
				;	Disable Receive While Error Transmit
				IN TEMPR1, UCSRB
				CBR TEMPR1, UART_RX_EN
				OUT UCSRB, TEMPR1
				;	Transmit "E-r-r-o-r"
				LDI UART_ERROR_FLAGS, ASCII_E
				RCALL UART_TRANSMIT_CHAR
				LDI UART_ERROR_FLAGS, ASCII_r
				RCALL UART_TRANSMIT_CHAR
				RCALL UART_TRANSMIT_CHAR
				LDI UART_ERROR_FLAGS, ASCII_o
				RCALL UART_TRANSMIT_CHAR
				LDI UART_ERROR_FLAGS, ASCII_r
				RCALL UART_TRANSMIT_CHAR
				LDI UART_ERROR_FLAGS, ASCII_CR
				RCALL UART_TRANSMIT_CHAR
				;	Renable Receive After Error Transmit
				IN TEMPR1, UCSRB
				SBR TEMPR1, UART_RX_EN
				OUT UCSRB, TEMPR1
				;	Start Receive Operation Again
				RJMP UART_RECEIVE

		UART_RECEIVE_END:
			MOV OUTPUT_DATA_TEMP, PREVIOUS_OUTPUT_DATA 
			;	Data Of UART_ERROR_FLAGS (Quantity Of User Trials)
			;	Loaded From  Stack
			POP PREVIOUS_OUTPUT_DATA
			POP UART_ERROR_FLAGS
			RET;	SubProgram Return

	;*** UART Receive Character ***
	UART_RECEIVE_CHAR:
		UART_RECEIVE_LOOP:
			SBIS UCSRA, RXC
			RJMP UART_RECEIVE_LOOP
		RCALL UART_RX_DATA
		RET;	SubProgram Return

	;*** UART Transmit Character ***
	UART_TRANSMIT_CHAR:
		OUT UDR, UART_ERROR_FLAGS
		UART_TRANSMIT_LOOP:
			SBIS UCSRA, UDRE
			RJMP UART_TRANSMIT_LOOP
		RET;	SubProgram Return

	;*** UART Receive Character ***
	UART_RX_DATA:
		UART_RX_DATA_BEGIN:
			IN UART_ERROR_FLAGS, UCSRA
			IN UART_RECEIVE_DATA, UDR
			;	Check For Error Flags
			ANDI UART_ERROR_FLAGS, (1<<FE)|(1<<PE)
			BRNE UART_FRAME_PARITY_OVERRUN_ERRORS
			;	No Error Detected Or Data Overrun Occured
			RJMP UART_RX_DATA_END

			UART_FRAME_PARITY_OVERRUN_ERRORS:
				LDI UART_RECEIVE_DATA, -1

		UART_RX_DATA_END:
			RET;	SubProgram Return

	;*** Play User Chosen Sound In Sample Mode ***
	PLAY_CORRESPONDING_SOUND:
		IN TEMPR1, TCCR1B
		SBR TEMPR1, TIM1_PSC64
		OUT TCCR1B, TEMPR1
		;	If Two-digit Mode Activated, 
		;	Input Number Digits Sum Stored In DELAY_PARAM
		;	Otherwise, In OUTPUT_DATA_TEMP
		SBRC ONE_TWO_DIGIT_MODE, 0
		MOV OUTPUT_DATA_TEMP, DELAY_PARAM
		;	If OUTPUT_DATA_TEMP Less Than 10
		;	After SUBI, Result Negative Number
		;	Store OUTPUT_DATA_TEMP In TEMPR1
		MOV TEMPR1, OUTPUT_DATA_TEMP
		SUBI OUTPUT_DATA_TEMP, 10
		BRCS FIRST_DIGIT_NONE_SOUND
		FIRST_DIGIT_ONE_SOUND:
			CPI OUTPUT_DATA_TEMP, 0
			BREQ PLAY_CHRISTMAS_TREE_BORN
			CPI OUTPUT_DATA_TEMP, 1
			BREQ PLAY_BEEP
			CPI OUTPUT_DATA_TEMP, 2
			BREQ PLAY_JINGLE_BELLS
			RJMP PLAY_CORRESPONDING_SOUND_END
		FIRST_DIGIT_NONE_SOUND:
			MOV OUTPUT_DATA_TEMP, TEMPR1
			CPI OUTPUT_DATA_TEMP, 9
			BREQ PLAY_CHUNGA_CHANGA
			CPI OUTPUT_DATA_TEMP, 8
			BREQ PLAY_LITTLE_CHRISTMAS_TREE
			CPI OUTPUT_DATA_TEMP, 7
			BREQ PLAY_ERROR_BEEP
			CPI OUTPUT_DATA_TEMP, 6
			BREQ PLAY_SMILE
			CPI OUTPUT_DATA_TEMP, 5
			BREQ PLAY_GRASSHOPPER
			CPI OUTPUT_DATA_TEMP, 4
			BREQ PLAY_HAPPY_BIRTHDAY
			CPI OUTPUT_DATA_TEMP, 3
			BREQ PLAY_SUCCESS_BEEP
			CPI OUTPUT_DATA_TEMP, 2
			BREQ PLAY_GOOD_NIGHT_BABY
			CPI OUTPUT_DATA_TEMP, 1
			BREQ PLAY_TWO_GEESE
			RJMP PLAY_CORRESPONDING_SOUND_END
			PLAY_TWO_GEESE:;				1
				RCALL TWO_GEESE
				RJMP PLAY_CORRESPONDING_SOUND_END
			PLAY_GOOD_NIGHT_BABY:;			2
				RCALL GOOD_NIGHT_BABY
				RJMP PLAY_CORRESPONDING_SOUND_END
			PLAY_SUCCESS_BEEP:;				3
				RCALL SUCCESS_BEEP
				RJMP PLAY_CORRESPONDING_SOUND_END
			PLAY_HAPPY_BIRTHDAY:;			4
				RCALL HAPPY_BIRTHDAY
				RJMP PLAY_CORRESPONDING_SOUND_END
			PLAY_GRASSHOPPER:;				5
				RCALL GRASSHOPPER
				RJMP PLAY_CORRESPONDING_SOUND_END
			PLAY_SMILE:;					6
				RCALL SMILE
				RJMP PLAY_CORRESPONDING_SOUND_END
			PLAY_ERROR_BEEP:;				7
				RCALL ERROR_BEEP
				RJMP PLAY_CORRESPONDING_SOUND_END
			PLAY_LITTLE_CHRISTMAS_TREE:;	8
				RCALL LITTLE_CHRISTMAS_TREE
				RJMP PLAY_CORRESPONDING_SOUND_END
			PLAY_CHUNGA_CHANGA:;			9
				RCALL CHUNGA_CHANGA
				RJMP PLAY_CORRESPONDING_SOUND_END
			PLAY_CHRISTMAS_TREE_BORN:;		10
				RCALL CHRISTMAS_TREE_BORN
				RJMP PLAY_CORRESPONDING_SOUND_END
			PLAY_BEEP:;						11
				RCALL BEEP
				RJMP PLAY_CORRESPONDING_SOUND_END
			PLAY_JINGLE_BELLS:;				12
				RCALL JINGLE_BELLS
				RJMP PLAY_CORRESPONDING_SOUND_END
		PLAY_CORRESPONDING_SOUND_END:
			IN TEMPR1, TCCR1B
			CBR TEMPR1, TIM1_PSC_RESET
			OUT TCCR1B, TEMPR1
			LDI DELAY_PARAM, 6
			RCALL DELAY
			SBRC ONE_TWO_DIGIT_MODE, 0
			LDI OUTPUT_DATA, DIGIT_HASHTAG
			SBRS ONE_TWO_DIGIT_MODE, 0
			LDI OUTPUT_DATA, DIGIT_0
			RCALL DIGIT_SERIAL_TRANSFER
			RET;	SubProgram Return

	;*** Play Random Sound In Trial Mode ***
	PLAY_RANDOM_SOUND:
		IN TEMPR1, TCCR1B
		SBR TEMPR1, TIM1_PSC64
		OUT TCCR1B, TEMPR1
		MOV TEMPR1, INPUT_DATA_OPTION
		SUBI INPUT_DATA_OPTION, 10
		BRCS FIRST_DIGIT_NONE_SOUND_RANDOM
		FIRST_DIGIT_ONE_SOUND_RANDOM:
			CPI INPUT_DATA_OPTION, 0
			BREQ PLAY_CHRISTMAS_TREE_BORN_RANDOM
			CPI INPUT_DATA_OPTION, 1
			BREQ PLAY_BEEP_RANDOM
			CPI INPUT_DATA_OPTION, 2
			BREQ PLAY_JINGLE_BELLS_RANDOM
			RJMP PLAY_CORRESPONDING_SOUND_END
		FIRST_DIGIT_NONE_SOUND_RANDOM:
			MOV INPUT_DATA_OPTION, TEMPR1
			CPI INPUT_DATA_OPTION, 9
			BREQ PLAY_CHUNGA_CHANGA_RANDOM
			CPI INPUT_DATA_OPTION, 8
			BREQ PLAY_LITTLE_CHRISTMAS_TREE_RANDOM
			CPI INPUT_DATA_OPTION, 7
			BREQ PLAY_ERROR_BEEP_RANDOM
			CPI INPUT_DATA_OPTION, 6
			BREQ PLAY_SMILE_RANDOM
			CPI INPUT_DATA_OPTION, 5
			BREQ PLAY_GRASSHOPPER_RANDOM
			CPI INPUT_DATA_OPTION, 4
			BREQ PLAY_HAPPY_BIRTHDAY_RANDOM
			CPI INPUT_DATA_OPTION, 3
			BREQ PLAY_SUCCESS_BEEP_RANDOM
			CPI INPUT_DATA_OPTION, 2
			BREQ PLAY_GOOD_NIGHT_BABY_RANDOM
			CPI INPUT_DATA_OPTION, 1
			BREQ PLAY_TWO_GEESE_RANDOM
			RJMP PLAY_CORRESPONDING_SOUND_END
			PLAY_TWO_GEESE_RANDOM:;					1
				RCALL TWO_GEESE
				RJMP PLAY_RANDOM_SOUND_END
			PLAY_GOOD_NIGHT_BABY_RANDOM:;			2
				RCALL GOOD_NIGHT_BABY
				RJMP PLAY_RANDOM_SOUND_END
			PLAY_SUCCESS_BEEP_RANDOM:;				3
				RCALL SUCCESS_BEEP
				RJMP PLAY_RANDOM_SOUND_END
			PLAY_HAPPY_BIRTHDAY_RANDOM:;			4
				RCALL HAPPY_BIRTHDAY
				RJMP PLAY_RANDOM_SOUND_END
			PLAY_GRASSHOPPER_RANDOM:;				5
				RCALL GRASSHOPPER
				RJMP PLAY_RANDOM_SOUND_END
			PLAY_SMILE_RANDOM:;						6
				RCALL SMILE
				RJMP PLAY_RANDOM_SOUND_END
			PLAY_ERROR_BEEP_RANDOM:;				7
				RCALL ERROR_BEEP
				RJMP PLAY_RANDOM_SOUND_END
			PLAY_LITTLE_CHRISTMAS_TREE_RANDOM:;		8
				RCALL LITTLE_CHRISTMAS_TREE
				RJMP PLAY_RANDOM_SOUND_END
			PLAY_CHUNGA_CHANGA_RANDOM:;				9
				RCALL CHUNGA_CHANGA
				RJMP PLAY_RANDOM_SOUND_END
			PLAY_CHRISTMAS_TREE_BORN_RANDOM:;		10
				MOV INPUT_DATA_OPTION, TEMPR1
				RCALL CHRISTMAS_TREE_BORN
				RJMP PLAY_RANDOM_SOUND_END
			PLAY_BEEP_RANDOM:;						11
				MOV INPUT_DATA_OPTION, TEMPR1
				RCALL BEEP
				RJMP PLAY_RANDOM_SOUND_END
			PLAY_JINGLE_BELLS_RANDOM:;				12
				MOV INPUT_DATA_OPTION, TEMPR1
				RCALL JINGLE_BELLS
				RJMP PLAY_RANDOM_SOUND_END
		PLAY_RANDOM_SOUND_END:
			IN TEMPR1, TCCR1B
			CBR TEMPR1, TIM1_PSC_RESET
			OUT TCCR1B, TEMPR1
			RET;	SubProgram Return

	;**** Musical Part ****		
	;*** Play Musical Note As Pressed Piano Key ***
	PLAY_MUSICAL_NOTE:
		OUT OCR1AL, TEMPR1
		LDI TEMPR1, 0x00
		OUT TCNT1H, TEMPR1
		OUT TCNT1L, TEMPR1		
		IN TEMPR1, TCCR0
		SBR TEMPR1, TIM0_PSC256
		OUT TCCR0, TEMPR1
		MOV TEMPR1, DELAY_PARAM
		PLAY_MUSICAL_NOTE_LOOP:
			CPI TEMPR1, 0
			BRNE PLAY_MUSICAL_NOTE_LOOP
		IN TEMPR1, TCCR0
		CBR TEMPR1, TIM0_PSC_RESET
		OUT TCCR0, TEMPR1	
		RET;	SubProgram Return

	;*** Success Beep Sound ***
	SUCCESS_BEEP:
		PUSH DELAY_PARAM
		LDI DELAY_PARAM, 2
		LDI TEMPR1, 7
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 3
		LDI TEMPR1, 5
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 4
		LDI TEMPR1, 3
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 8
		LDI TEMPR1, 2
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 3
		LDI TEMPR1, 5
		RCALL PLAY_MUSICAL_NOTE
		POP DELAY_PARAM
		RET;	SubProgram Return

	;*** Error Beep Sound ***
	ERROR_BEEP:
		PUSH DELAY_PARAM
		LDI DELAY_PARAM, 9
		LDI TEMPR1, 172
		RCALL PLAY_MUSICAL_NOTE
		POP DELAY_PARAM
		RET;	SubProgram Return

	;*** Error Beep Sound ***
	BEEP:
		PUSH DELAY_PARAM
		LDI DELAY_PARAM, 2
		LDI TEMPR1, 130
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, 30
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, 150
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, 30
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, 130
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, 30
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, 150
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, 30
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, 130
		RCALL PLAY_MUSICAL_NOTE
		POP DELAY_PARAM
		RET;	SubProgram Return

	;*** В Лесу Родилась Ёлочка ***
	CHRISTMAS_TREE_BORN:
		LDI DELAY_PARAM, 4
		;1st Verse: В Лесу Родилась Ёлочка
		RCALL CHRISTMAS_TREE_BORN_REPEATED_VERSE
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		;2nd Verse: В Лесу Она Росла
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4B4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, D5
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, C5
		RCALL PLAY_MUSICAL_NOTE
		;3rd Verse: Зимой И Летом Стройная
		LDI TEMPR1, C5
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, D4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, D4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4B4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4B4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		;4th Verse: Зеленая Была
		RCALL CHRISTMAS_TREE_BORN_REPEATED_VERSE
		LDI DELAY_PARAM, 0
		RET;	SubProgram Return
	;	CHRISTMAS_TREE_BORN_REPEATED_VERSE
	CHRISTMAS_TREE_BORN_REPEATED_VERSE:
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE	
		RET;	SubProgram Return

	;*** Happy Birthday To You ***
	HAPPY_BIRTHDAY:
		LDI DELAY_PARAM, 6
		;1st Verse: Happy Birthday To You
		RCALL HAPPY_BIRTHDAY_REPEATED_VERSE
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 6
		;2nd Verse: Happy Birthday To You
		LDI TEMPR1, C4
		RCALL HAPPY_BIRTHDAY_REPEATED_VERSE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 6
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 6
		;3rd Verse: Happy Birthday Dear ...
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, D4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 6
		;4th Verse: Happy Birthday To You
		LDI TEMPR1, A4B4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4B4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 6
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 0
		RET;	SubProgram Return		
	;	HAPPY_BIRHTDAY_REPEATED_VERSE
	HAPPY_BIRTHDAY_REPEATED_VERSE:
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, D4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 6
		RET;	SubProgram Return

	;*** В Траве Сидел Кузнечик ***
	GRASSHOPPER:
		;	Store Data Of DELAY_PARAM In Stack
;		PUSH REPETITON_CONTROL
;		PUSH OUTPUT_DATA_TEMP
		LDI DELAY_PARAM, 4
		;1st Verse: В Траве Сидел Кузнечик
		LDI REPETITION_CONTROL, 2
		REPEAT_LOOP3:
			LDI TEMPR1, F4
			RCALL PLAY_MUSICAL_NOTE
			LDI TEMPR1, C4
			RCALL PLAY_MUSICAL_NOTE
			LDI DELAY_PARAM, 1
			RCALL DELAY
			LDI DELAY_PARAM, 4
			DEC REPETITION_CONTROL
			BRNE REPEAT_LOOP3
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		;2nd Verse: В Траве Сидел Кузнечик
		LDI REPETITION_CONTROL, 2
		REPEAT_LOOP4:
			LDI TEMPR1, E4
			RCALL PLAY_MUSICAL_NOTE
			LDI TEMPR1, C4
			RCALL PLAY_MUSICAL_NOTE
			LDI DELAY_PARAM, 1
			RCALL DELAY
			LDI DELAY_PARAM, 4
			DEC REPETITION_CONTROL
			BRNE REPEAT_LOOP4
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		;3rd Verse: Совсем Как Огуречик
		LDI REPETITION_CONTROL, 2
		REPEAT_LOOP5:
			LDI TEMPR1, F4
			RCALL PLAY_MUSICAL_NOTE
			LDI TEMPR1, C4
			RCALL PLAY_MUSICAL_NOTE
			LDI DELAY_PARAM, 1
			RCALL DELAY
			LDI DELAY_PARAM, 4
			DEC REPETITION_CONTROL
			BRNE REPEAT_LOOP5
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		;4th Verse: Зелёненький Он Был
		LDI REPETITION_CONTROL, 2
		REPEAT_LOOP6:
			LDI TEMPR1, E4
			RCALL PLAY_MUSICAL_NOTE
			LDI TEMPR1, C4
			RCALL PLAY_MUSICAL_NOTE
			DEC REPETITION_CONTROL
			BRNE REPEAT_LOOP6
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 4
		RCALL DELAY
		LDI DELAY_PARAM, 4
		;	2nd Part
		LDI REPETITION_CONTROL, 2
		REPEAT_LOOP:
			LDI DELAY_PARAM, 3
			;5th Verse: Представьте Себе, Представьте Себе
			LDI TEMPR1, F4
			RCALL PLAY_MUSICAL_NOTE
			LDI OUTPUT_DATA_TEMP, 5
			REPEAT_LOOP1:
				LDI TEMPR1, G4
				RCALL PLAY_MUSICAL_NOTE
				DEC OUTPUT_DATA_TEMP
				BRNE REPEAT_LOOP1
			LDI OUTPUT_DATA_TEMP, 4
			REPEAT_LOOP2:
				LDI TEMPR1, G4A4
				RCALL PLAY_MUSICAL_NOTE
				DEC OUTPUT_DATA_TEMP
				BRNE REPEAT_LOOP2
			LDI DELAY_PARAM, 4
			;6th Verse: Совсем Как Огуречик
			LDI TEMPR1, G4A4
			RCALL PLAY_MUSICAL_NOTE
			LDI TEMPR1, G4A4
			RCALL PLAY_MUSICAL_NOTE
			LDI TEMPR1, G4
			RCALL PLAY_MUSICAL_NOTE
			LDI TEMPR1, F4
			RCALL PLAY_MUSICAL_NOTE
			LDI TEMPR1, E4
			RCALL PLAY_MUSICAL_NOTE
			LDI TEMPR1, F4
			RCALL PLAY_MUSICAL_NOTE
			LDI TEMPR1, F4
			RCALL PLAY_MUSICAL_NOTE
			DEC REPETITION_CONTROL
			BRNE REPEAT_LOOP
		;	Load Data Of DELAY_PARAM From Stack
;		POP OUTPUT_DATA_TEMP
;		POP REPETITION_CONTROL
		LDI DELAY_PARAM, 0
		RET;	SubProgram Return

	;*** Жили У Бабуси Два Веселых Гуся ***
	TWO_GEESE:
		;	Store Data Of DELAY_PARAM In Stack
;		PUSH REPETITION_CONTROL
		LDI DELAY_PARAM, 4
		;1st Verse: Жили У Бабуси Два Веселых Гуся
		LDI REPETITION_CONTROL, 2
		TWO_GEESE_FIRST_LOOP:
			RCALL TWO_GEESE_REPEATED_VERSE
			LDI TEMPR1, A4
			RCALL PLAY_MUSICAL_NOTE
			LDI TEMPR1, A4
			RCALL PLAY_MUSICAL_NOTE
			LDI DELAY_PARAM, 1
			RCALL DELAY
			LDI DELAY_PARAM, 4
			DEC REPETITION_CONTROL
			BRNE TWO_GEESE_FIRST_LOOP
		;2nd Verse: Один Серый Другой Белый
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 4
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 4
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		;3rd Verse: Два Веселых Гуся
		RCALL TWO_GEESE_REPEATED_VERSE
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		;	Load Data Of DELAY_PARAM From Stack
;		POP REPETITION_CONTROL
		RET;	SubProgram Return
	;	TWO_GEESE_REPEATED_VERSE
	TWO_GEESE_REPEATED_VERSE:
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 4
		LDI TEMPR1, D4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 0
		RET;	SubProgram Return

	;*** Спят Усталые Игрушки! ***
	GOOD_NIGHT_BABY:
		LDI DELAY_PARAM, 5
		;1st Verse: Спят Усталые Игрушки, Книжки Спят
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 5
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, D4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 5
		;2nd Verse: Одеяло И Подушки Ждут Ребят
		RCALL GOOD_NIGHT_BABY_REPEATED_VERSE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 5
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, D4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, D4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, D4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 5
		;3rd Verse: За День Мы Устали Очень
		LDI DELAY_PARAM, 4
		RCALL GOOD_NIGHT_BABY_REPEATED_VERSE
		LDI DELAY_PARAM, 3
		RCALL DELAY
		LDI DELAY_PARAM, 4
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 4
		;4th Verse: Скажем Всем Спокойной Ночи
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 5
		;5th Verse: Глазки Закрывай
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 5
		;6th Verse: Баю-бай
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 3
		RCALL DELAY
		LDI DELAY_PARAM, 5
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 3
		RCALL DELAY
		LDI DELAY_PARAM, 5
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 4
		RCALL DELAY
		LDI DELAY_PARAM, 0
		RET;	SubProgram Return
	;*** GOOD_NIGHT_BABY_REPEATED_VERSE ***
	GOOD_NIGHT_BABY_REPEATED_VERSE:
		LDI TEMPR1, D4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, D4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		RET;	SubProgram Return

	;*** Улыбка ***
	SMILE:
		LDI DELAY_PARAM, 3
		;	1st Verse
		LDI TEMPR1, G4;	Oт
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4;	У
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4;	лыб
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4; ки 
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, D4;	Хму
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, F4;	pый
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, E4;	День
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, D4;	Свет
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, C4;	лей
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		;	2nd Verse
		LDI TEMPR1, E4;	Oт
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4;	У
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4;	лыб
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, A4;	ки
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, A4;	В Не
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, B4;	бе
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, D5;	Ра
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, C5;	ду
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, B4;	га
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, A4;	Пpo
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, C5;	cнет
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4;	cя
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		;	3rd Verse
		LDI TEMPR1, A4;	Пo	
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, B4;	де
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, C5;	лиcь	
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, B4;	У
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4;	лыб
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, E4;	кo
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4;	ю
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, F4;	Свo
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, A4;	ей
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		;	4th Verse
		LDI TEMPR1, B4;	И
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4;	О
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, C5;	на
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4;	К Те
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, B4;	бе
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, A4;	Не
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, A4;	Раз
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4;	Е
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, D4;	ще
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, E4;	Веp
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, D4;	нет
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, C4;	cя
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 0
		RET;	SubProgram Return

	;*** Чунга-чанга ***
	CHUNGA_CHANGA:
		LDI DELAY_PARAM, 3
		;	1st Verse
		RCALL CHUNGA_CHANGA_REPEATED_VERSE1
		LDI TEMPR1, G4;	Си
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, F4;	ний
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4;	Не
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4A4; бо
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4;	вод
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		;	2nd Verse
		RCALL CHUNGA_CHANGA_REPEATED_VERSE2
		LDI TEMPR1, D4;	Ле
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, D4E4; то
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, F4;	Круг
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4; лый
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, D4E4; Год
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		;	3rd Verse
		RCALL CHUNGA_CHANGA_REPEATED_VERSE1
		LDI TEMPR1, G4;	Ве
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, F4;	се
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, G4;	ло
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4A4; Жи
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4;	вем
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		;	4th Verse
		RCALL CHUNGA_CHANGA_REPEATED_VERSE2
		LDI TEMPR1, D4;	Пе
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, D4E4; сен
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, F4;	ку
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4; По
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, D4E4; ем
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 0
		RET;	SubProgram Return
	;*** CHUNGA_CHANGA_REPEATED_VERSE1 ***
	CHUNGA_CHANGA_REPEATED_VERSE1:
		LDI TEMPR1, C4;	Чун
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, D4E4; га
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4;	Чан
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4;	га
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		RET;	SubProgram Return
	;*** CHUNGA_CHANGA_REPEATED_VERSE2 ***
	CHUNGA_CHANGA_REPEATED_VERSE2:
		LDI TEMPR1, C5;	Чун
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, D4E4; га
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, D4;	Чан
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, D4;	га
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		RET;	SubProgram Return

	;*** Маленькой Ёлочке Холодно Зимой ***
	LITTLE_CHRISTMAS_TREE:
		LDI DELAY_PARAM, 3
		;	1st Verse
		LDI TEMPR1, G4;	Ма
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, E4; лень
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, E4;	кой
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4;	Ё
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4;	лоч
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, E4;	ке
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		;	2nd Verse: Хо-лод-но Зи-мой
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		RCALL LITTLE_CHRISTMAS_TREE_REPEATED_VERSE
		;	3rd Verse
		LDI TEMPR1, B4;	Из
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, C5;	Ле
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, B4;	су
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4; Ё
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, E4;	лоч
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, E4; ку
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		;	4th Verse: Взя-ли Мы До-мой
		LDI TEMPR1, G4 
		RCALL PLAY_MUSICAL_NOTE
		RCALL LITTLE_CHRISTMAS_TREE_REPEATED_VERSE
		LDI DELAY_PARAM, 0
		RET;	SubProgram Return
	;*** LITTLE_CHRISTMAS_TREE_REPEATED_VERSE ***
	LITTLE_CHRISTMAS_TREE_REPEATED_VERSE:
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, D4	
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		RET;	SubProgram Return

	;*** Jingle Bells ***
	JINGLE_BELLS:
		;	Store Data Of DELAY_PARAM In Stack
;		PUSH REPETITION_CONTROL
		LDI DELAY_PARAM, 3
		;	1st Verse
		RCALL JINGLE_BELLS_FIRST_VERSE
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		;	2nd Verse
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		RCALL JINGLE_BELLS_SECOND_VERSE
		LDI TEMPR1, D4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		;	3rd Verse
		RCALL JINGLE_BELLS_THIRD_VERSE
		LDI TEMPR1, E4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		;	4th Verse
		LDI TEMPR1, C5
		RCALL PLAY_MUSICAL_NOTE
		RCALL JINGLE_BELLS_FOURTH_VERSE
		;	5th Verse
		RCALL JINGLE_BELLS_FIRST_VERSE
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		;	6th Verse
		RCALL JINGLE_BELLS_FIRST_VERSE
		LDI TEMPR1, D4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		;	7th Verse
		RCALL JINGLE_BELLS_THIRD_VERSE
		LDI TEMPR1, C5
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, C5
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, C5
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, C5
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3
		;	8th Verse
		LDI TEMPR1, D5
		RCALL PLAY_MUSICAL_NOTE
		RCALL JINGLE_BELLS_FOURTH_VERSE
		; Refrain, Twice
		RCALL JINGLE_BELLS_REFRAIN
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 2
		LDI TEMPR1, C5
		RCALL PLAY_MUSICAL_NOTE
;		LDI DELAY_PARAM, 2
		RCALL DELAY
;		LDI DELAY_PARAM, 2
		RCALL JINGLE_BELLS_REFRAIN
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 2
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
;		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 0
		;	Load Data Of DELAY_PARAM From Stack
;		POP REPETITION_CONTROL
		RET;	SubProgram Return

	;*** Jingle Bells 1st Verse ***
	JINGLE_BELLS_FIRST_VERSE:
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3		
		RET;	SubProgram Return

	;*** Jingle Bells 2nd Verse ***
	JINGLE_BELLS_SECOND_VERSE:
		LDI TEMPR1, C4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3		
		RET;	SubProgram Return

	;*** Jingle Bells 3rd Verse ***
	JINGLE_BELLS_THIRD_VERSE:
		LDI TEMPR1, D4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, B4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3		
		RET;	SubProgram Return

	;*** Jingle Bells 4th Verse ***
	JINGLE_BELLS_FOURTH_VERSE:
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, C5
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, B4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 3
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 3		
		RET;	SubProgram Return

	;*** Jingle Bells Refrain ***
	JINGLE_BELLS_REFRAIN:
		LDI DELAY_PARAM, 2
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 2
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 2
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 2
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 2
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 2
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 2
		
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 2
		LDI TEMPR1, C5
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 2
		LDI TEMPR1, F4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 2
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 2
		
		LDI REPETITION_CONTROL, 5
		JINGLE_BELLS_REFRAIN_LOOP1:
			LDI TEMPR1, B4
			RCALL PLAY_MUSICAL_NOTE
			LDI DELAY_PARAM, 1
			RCALL DELAY
			LDI DELAY_PARAM, 2
			DEC REPETITION_CONTROL
			BRNE JINGLE_BELLS_REFRAIN_LOOP1
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 2
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 2
			
		LDI REPETITION_CONTROL, 3
		JINGLE_BELLS_REFRAIN_LOOP2:
			LDI TEMPR1, A4
			RCALL PLAY_MUSICAL_NOTE
			LDI DELAY_PARAM, 1
			RCALL DELAY
			LDI DELAY_PARAM, 2
			DEC REPETITION_CONTROL
			BRNE JINGLE_BELLS_REFRAIN_LOOP2
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 2
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 2
		LDI TEMPR1, A4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 1
		RCALL DELAY
		LDI DELAY_PARAM, 2
		LDI TEMPR1, G4
		RCALL PLAY_MUSICAL_NOTE
		LDI DELAY_PARAM, 2
		RCALL DELAY
		LDI DELAY_PARAM, 2				
		RET;	SubProgram Return


;****** Interrupt Routines ******

	;*** External Interrupt 0 Request Handler ***
	EXT_INT0:
		EXT_INT0_HANDLER_BEGIN:
			;	Store Data of GPR in STACK
			PUSH TEMPR1
			PUSH DELAY_PARAM
			;	20ms Delay to Exclude Contact Noise
			RCALL NOISE_DELAY
			;	Mode Selection Based On Button State
			SBIS PIND, BUTTON_MODE
			RJMP SAMPLE_MODE_ACTIVE
			RJMP TRIAL_MODE_ACTIVE			
			;	Show User All Options
			SAMPLE_MODE_ACTIVE:
				LDI SAMPLE_TRIAL_MODE, 0
				RJMP EXT_INT0_HANDLER_END
			;	Relinquish Control To User
			TRIAL_MODE_ACTIVE:
				LDI SAMPLE_TRIAL_MODE, 1
		EXT_INT0_HANDLER_END:
			;	Load Stored Data of GPR from STACK
			POP DELAY_PARAM
			POP TEMPR1
			RETI;	Interrupt Return

	;*** External Interrupt 1 Request Handler ***
	EXT_INT1:
		EXT_INT1_HANDLER_BEGIN:
			;	Store Data of GPR in STACK
			PUSH TEMPR1
			PUSH DELAY_PARAM
			PUSH OUTPUT_DATA
			;	20ms Delay to Exclude Contact Noise
			RCALL NOISE_DELAY
			
			RCALL SEGMENTS_SLEEP_MODE
			CLR BULLS_EYE_CNT
			LDI UART_ERROR_FLAGS, 12
			RCALL ONE_DIGIT_MODE
			LDI SAMPLE_TRIAL_MODE, 1
		EXT_INT1_HANDLER_END:
			LDI OUTPUT_DATA, DIGIT_0
			RCALL DIGIT_SERIAL_TRANSFER
			POP OUTPUT_DATA
			POP DELAY_PARAM
			POP TEMPR1
			RETI;	Interrupt Return

	;*** Timer 0 Overflow Interrupt Request Handler ***
	TIM0_OVF:
		DEC TEMPR1
		RETI;	Interrupt Return
