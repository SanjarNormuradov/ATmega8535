.def INPUT_DATA = R22
.def OUTPUT_DATA_TEMP = R23
.def OUTPUT_DATA = R24
.def INPUT_ROW = R25
.def DIAL_CONTROL = R26
.def REPETITION_CONTROL = R27

.equ SEG_CLK = PORTC0
.equ SEG_DATA = PORTC1
.equ SEG_OUTPUT_MODE = (1<<SEG_CLK)|(1<<SEG_DATA)

.equ KEY_IN_1 = PORTB4
.equ KEY_IN_2 = PORTB5
.equ KEY_IN_3 = PORTB6
.equ KEY_IN_4 = PORTB7
.equ KEY_OUTPUT_MODE = (1<<KEY_IN_1)|(1<<KEY_IN_2)|(1<<KEY_IN_3)|(1<<KEY_IN_4)
.equ ROWS4321_1110 = 0xE0
.equ ROWS4321_1101 = 0xD0
.equ ROWS4321_1011 = 0xB0
.equ ROWS4321_0111 = 0x70
.equ KEY_OUT_1 = PIND5
.equ KEY_OUT_2 = PIND6
.equ KEY_OUT_3 = PIND7
.equ KEY_OUTPUT_DEFAULT = (1<<KEY_OUT_1)|(1<<KEY_OUT_2)|(1<<KEY_OUT_3)

.equ DIGIT_0 = 0b11000000
.equ DIGIT_1 = 0b11111001
.equ DIGIT_2 = 0b10100100
.equ DIGIT_3 = 0b10110000
.equ DIGIT_4 = 0b10011001
.equ DIGIT_5 = 0b10010010
.equ DIGIT_6 = 0b10000010
.equ DIGIT_7 = 0b11111000
.equ DIGIT_8 = 0b10000000
.equ DIGIT_9 = 0b10010000
.equ DIGIT_ASTERISK = 0b10001000
.equ DIGIT_HASHTAG = 0b10001001


		;	Initialize PORTB4:7 As Outputs For Keyboard
		IN TEMPR1, DDRB
		SBR TEMPR1, KEY_OUTPUT_MODE
		OUT DDRB, TEMPR1

		;	Start Sending 1 To Keyboard Rows From 1st Row
		LDI INPUT_ROW, 0x1
		LDI DIAL_CONTROL, KEY_OUTPUT_DEFAULT
		MOV REPETITION_CONTROL, DIAL_CONTROL

		;	Initialize PORTC1:0 As DATA:CLK Outputs For 7-Segment Indicators
		IN TEMPR1, DDRC
		SBR TEMPR1, SEG_OUTPUT_MODE
		OUT DDRC, TEMPR1

		;	Turn Off All 7-segment Indicators
		RCALL SEGMENTS_SLEEP_MODE

	;*** Turn Off All 7-Segment Indicators ***
	SEGMENTS_SLEEP_MODE:
		PUSH TEMPR1
		SBI PORTC, SEG_DATA
		LDI TEMPR1, 0x20
		SLEEP_MODE_BEGIN:
			SBI PORTC, SEG_CLK
			CBI PORTC, SEG_CLK
			DEC TEMPR1
			BRNE SLEEP_MODE_BEGIN
		POP TEMPR1
		RET;	SubProgram Return

	;*** Set Input Data In Keyboard ***
	SET_INPUT_DATA:
		SET_INPUT_DATA_BEGIN:
			SBRC INPUT_ROW, 0
			RJMP ZEROin1
			SBRC INPUT_ROW, 1
			RJMP ZEROin2
			SBRC INPUT_ROW, 2
			RJMP ZEROin3
			SBRC INPUT_ROW, 3
			RJMP ZEROin4

			ZEROin1:
				LDI INPUT_DATA, ROWS4321_1110
				LDI INPUT_ROW, 0x2
				RJMP SET_INPUT_DATA_END
			ZEROin2:
				LDI INPUT_DATA, ROWS4321_1101
				LDI INPUT_ROW, 0x4
				RJMP SET_INPUT_DATA_END
			ZEROin3:
				LDI INPUT_DATA, ROWS4321_1011
				LDI INPUT_ROW, 0x8
				RJMP SET_INPUT_DATA_END
			ZEROin4:
				LDI INPUT_DATA, ROWS4321_0111
				LDI INPUT_ROW, 0x1
		SET_INPUT_DATA_END:
			RET;	SubProgram Return

	;*** Input Row Detection ***
	PRESSED_KEY:
		PRESSED_KEY_DETECTION_BEGIN:			
			SBRC INPUT_ROW, 0
			RJMP KEYS_SOS
			SBRC INPUT_ROW, 1
			RJMP KEYS_123
			SBRC INPUT_ROW, 2
			RJMP KEYS_456
			SBRC INPUT_ROW, 3
			RJMP KEYS_789
			;** 1st Row Keyboards **
			KEYS_123:
				SBRS OUTPUT_DATA, KEY_OUT_1
				RJMP KEY_1
				SBRS OUTPUT_DATA, KEY_OUT_2
				RJMP KEY_2
				SBRS OUTPUT_DATA, KEY_OUT_3
				RJMP KEY_3
			;** 2nd Row Keyboards **
			KEYS_456:
				SBRS OUTPUT_DATA, KEY_OUT_1
				RJMP KEY_4
				SBRS OUTPUT_DATA, KEY_OUT_2
				RJMP KEY_5
				SBRS OUTPUT_DATA, KEY_OUT_3
				RJMP KEY_6
			;** 3rd Row Keyboards **	
			KEYS_789:
				SBRS OUTPUT_DATA, KEY_OUT_1
				RJMP KEY_7
				SBRS OUTPUT_DATA, KEY_OUT_2
				RJMP KEY_8
				SBRS OUTPUT_DATA, KEY_OUT_3
				RJMP KEY_9
			;** 4st Row Keyboards **
			KEYS_SOS:
				SBRS OUTPUT_DATA, KEY_OUT_1
				RJMP KEY_ASTERISK
				SBRS OUTPUT_DATA, KEY_OUT_2
				RJMP KEY_0
				SBRS OUTPUT_DATA, KEY_OUT_3
				RJMP KEY_HASHTAG
				;** Send Number To Indicator **
				KEY_1:
					LDI OUTPUT_DATA, DIGIT_1
					LDI OUTPUT_DATA_TEMP, 1
					RCALL DIGIT_SERIAL_TRANSFER
					RJMP PRESSED_KEY_DETECTION_END
				KEY_2:
					LDI OUTPUT_DATA, DIGIT_2
					LDI OUTPUT_DATA_TEMP, 2
					RCALL DIGIT_SERIAL_TRANSFER		
					RJMP PRESSED_KEY_DETECTION_END
				KEY_3:
					LDI OUTPUT_DATA, DIGIT_3
					LDI OUTPUT_DATA_TEMP, 3
					RCALL DIGIT_SERIAL_TRANSFER
					RJMP PRESSED_KEY_DETECTION_END
				KEY_4:
					LDI OUTPUT_DATA, DIGIT_4
					LDI OUTPUT_DATA_TEMP, 4
					RCALL DIGIT_SERIAL_TRANSFER
					RJMP PRESSED_KEY_DETECTION_END
				KEY_5:
					LDI OUTPUT_DATA, DIGIT_5
					LDI OUTPUT_DATA_TEMP, 5
					RCALL DIGIT_SERIAL_TRANSFER
					RJMP PRESSED_KEY_DETECTION_END
				KEY_6:
					LDI OUTPUT_DATA, DIGIT_6
					LDI OUTPUT_DATA_TEMP, 6
					RCALL DIGIT_SERIAL_TRANSFER
					RJMP PRESSED_KEY_DETECTION_END
				KEY_7:
					LDI OUTPUT_DATA, DIGIT_7
					LDI OUTPUT_DATA_TEMP, 7
					RCALL DIGIT_SERIAL_TRANSFER
					RJMP PRESSED_KEY_DETECTION_END
				KEY_8:
					LDI OUTPUT_DATA, DIGIT_8
					LDI OUTPUT_DATA_TEMP, 8
					RCALL DIGIT_SERIAL_TRANSFER
					RJMP PRESSED_KEY_DETECTION_END
				KEY_9:
					LDI OUTPUT_DATA, DIGIT_9
					LDI OUTPUT_DATA_TEMP, 9
					RCALL DIGIT_SERIAL_TRANSFER
					RJMP PRESSED_KEY_DETECTION_END
				KEY_ASTERISK:
					LDI OUTPUT_DATA, DIGIT_ASTERISK
					LDI OUTPUT_DATA_TEMP, 13
					RJMP PRESSED_KEY_DETECTION_END
				KEY_0:
					LDI OUTPUT_DATA, DIGIT_0
					LDI OUTPUT_DATA_TEMP, 0
					RCALL DIGIT_SERIAL_TRANSFER
					RJMP PRESSED_KEY_DETECTION_END
				KEY_HASHTAG:
					LDI OUTPUT_DATA, DIGIT_HASHTAG
					LDI OUTPUT_DATA_TEMP, 14
		PRESSED_KEY_DETECTION_END:
			RET;	SubProgram Return

	;*** Receive Input Number From Keyboard ***
	RECEIVE_DATA_FROM_KEYBOARD:
		NO_OR_LONG_PRESSED_KEY:
			RCALL SET_INPUT_DATA
			LONG_PRESSED_KEY:
				MOV REPETITION_CONTROL, DIAL_CONTROL
				MOV OUTPUT_DATA, OUTPUT_DATA_TEMP
				OUT PORTB, INPUT_DATA
				LDI DIAL_CONTROL, KEY_OUTPUT_DEFAULT
				IN OUTPUT_DATA_TEMP, PIND
				AND DIAL_CONTROL, OUTPUT_DATA_TEMP
				CPI DIAL_CONTROL, KEY_OUTPUT_DEFAULT
				BRNE LONG_PRESSED_KEY
				CP	DIAL_CONTROL, REPETITION_CONTROL
				BREQ NO_OR_LONG_PRESSED_KEY			
			RCALL PRESSED_KEY
			CPI OUTPUT_DATA, DIGIT_ASTERISK
			BREQ ONE_DIGIT_MODE_ACTIVATE
			CPI OUTPUT_DATA, DIGIT_HASHTAG
			BREQ TWO_DIGIT_MODE_ACTIVATE
			RJMP RECEIVE_DATA_FROM_KEYBOARD_END
			ONE_DIGIT_MODE_ACTIVATE:
				RCALL ONE_DIGIT_MODE
				RJMP RECEIVE_DATA_FROM_KEYBOARD_END
			TWO_DIGIT_MODE_ACTIVATE:
				RCALL TWO_DIGIT_MODE
		RECEIVE_DATA_FROM_KEYBOARD_END:
			RET;	SubProgram Return


	;*** Serial Data Transfer, Digits ***
	DIGIT_SERIAL_TRANSFER:
		;	Store Data Of DELAY_PARAM In Stack
		PUSH TEMPR1
		PUSH DELAY_PARAM

		LDI TEMPR1, 0x08
		CPI ONE_TWO_DIGIT_MODE, 0
		BREQ ONE_DIGIT_SERIAL_TRANSFER
		TWO_DIGIT_SERIAL_TRANSFER:
			CPI OUTPUT_DATA, DIGIT_HASHTAG
			BREQ RESET_TWO_DIGIT_MODE
			CPI TWO_DIGIT_MODE_SEQUENCE, 1
			BREQ SECOND_DIGIT
			;	Send 1st Digit, Xx
			FIRS_DIGIT:
				;	Send 0 Before 1st Digit, 0X
				MOV PREVIOUS_OUTPUT_DATA, OUTPUT_DATA
				LDI OUTPUT_DATA, DIGIT_0
				;	Start Counting From 0
				CLR DELAY_PARAM
				RJMP ONE_DIGIT_SERIAL_TRANSFER
			;	Send 2nd Digit, xX 
			SECOND_DIGIT:
				MOV DELAY_PARAM, OUTPUT_DATA
				MOV OUTPUT_DATA, PREVIOUS_OUTPUT_DATA
				MOV PREVIOUS_OUTPUT_DATA, DELAY_PARAM
				;	Start Counting From 0
				CLR DELAY_PARAM
				RJMP ONE_DIGIT_SERIAL_TRANSFER
			;	Reset Two-digit Mode, 00	
			RESET_TWO_DIGIT_MODE:
				LDI OUTPUT_DATA, DIGIT_0
				LDI PREVIOUS_OUTPUT_DATA, DIGIT_0
				LDI TWO_DIGIT_MODE_SEQUENCE, 1
				CLR DELAY_PARAM
		;	Clear Indicators Before Sending Digits
		ONE_DIGIT_SERIAL_TRANSFER:
			RCALL SEGMENTS_SLEEP_MODE

		DIGIT_SERIAL_TRANSFER_BEGIN:
			LSL OUTPUT_DATA
			BRCS SEND_1
			SEND_0:
				CBI PORTC, SEG_DATA
				SBI PORTC, SEG_CLK
				CBI PORTC, SEG_CLK
				DEC TEMPR1
				BRNE DIGIT_SERIAL_TRANSFER_BEGIN
				RJMP DIGIT_SERIAL_TRANSFER_DOUBLE_CHECK
			SEND_1:
				SBI PORTC, SEG_DATA
				SBI PORTC, SEG_CLK
				CBI PORTC, SEG_CLK
				DEC TEMPR1
				BRNE DIGIT_SERIAL_TRANSFER_BEGIN

		DIGIT_SERIAL_TRANSFER_DOUBLE_CHECK:
			CPI ONE_TWO_DIGIT_MODE, 0
			;	Digit Was Sent In One-Digit Mode, Return Subprogram
			BREQ DIGIT_SERIAL_TRANSFER_END
			;	Two-Digit Mode
			CPI DELAY_PARAM, 0
			BREQ FIRST_SENT_SECOND_NEXT
			;	2nd Digit Was Sent,
			;	Start Next Transfer From 1st Digit, Return Subprogram
			SBRC TWO_DIGIT_MODE_SEQUENCE, 0
			CLR PREVIOUS_OUTPUT_DATA
			EOR TWO_DIGIT_MODE_SEQUENCE, DELAY_PARAM
			RJMP DIGIT_SERIAL_TRANSFER_END
			;	DIGIT_0 Or 1st Digit From Previous Trasfer Was Sent,
			;	Send Next 1st Or 2nd Digit Respectively
			FIRST_SENT_SECOND_NEXT:
				MOV OUTPUT_DATA, PREVIOUS_OUTPUT_DATA
				INC DELAY_PARAM
				LDI TEMPR1, 0x08
				RJMP DIGIT_SERIAL_TRANSFER_BEGIN

			DIGIT_SERIAL_TRANSFER_END:
			;	Load Data Of DELAY_PARAM From Stack
			POP DELAY_PARAM
			POP TEMPR1
				RET;	SubProgram Return